{"ast":null,"code":"var _jsxFileName = \"/Users/keshavsruthi/Documents/GitHub/SC2006-Software-Eng/sc2006/client/src/components/Tables.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport './Tables.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RestaurantTables({\n  restaurantId\n}) {\n  _s();\n  const [tables, setTables] = useState([]);\n  useEffect(() => {\n    // Fetch table data for the specified restaurant\n    axios.get(`http://localhost:30005/api/restaurants/${restaurantId}/tables`).then(response => {\n      setTables(response.data);\n      console.log(response.data);\n    }).catch(error => {\n      console.error(\"Error fetching tables:\", error);\n    });\n  }, [restaurantId, tables]);\n\n  // eslint-disable-next-line\n  const reserveTable = tableNumber => {\n    // Find the table to reserve\n    const tableToReserve = tables.find(table => table.tableNumber === tableNumber);\n    if (tableToReserve) {\n      if (tableToReserve.isAvailable) {\n        // Send a request to reserve the table\n        axios.post(`http://localhost:30005/api/restaurants/${restaurantId}/tables/reserve`, {\n          tableNumber\n        }).then(() => {\n          // Update the local state to mark the table as reserved\n          setTables(prevTables => prevTables.map(table => table.tableNumber === tableNumber ? {\n            ...table,\n            isAvailable: false\n          } : table));\n        }).catch(error => {\n          console.error(\"Error reserving table:\", error);\n        });\n      } else {\n        // Handle case when the table is already reserved\n        console.error(\"Table is already reserved\");\n      }\n    }\n  };\n\n  // eslint-disable-next-line\n  const unreserveTable = tableNumber => {\n    // Find the table to unreserve\n    const tableToUnreserve = tables.find(table => table.tableNumber === tableNumber);\n    if (tableToUnreserve) {\n      if (!tableToUnreserve.isAvailable) {\n        // Send a request to unreserve the table\n        axios.post(`http://localhost:30005/api/restaurants/${restaurantId}/tables/unreserve`, {\n          tableNumber\n        }).then(() => {\n          // Update the local state to mark the table as available\n          setTables(prevTables => prevTables.map(table => table.tableNumber === tableNumber ? {\n            ...table,\n            isAvailable: true\n          } : table));\n        }).catch(error => {\n          console.error(\"Error unreserving table:\", error);\n        });\n      } else {\n        // Handle case when the table is already available\n        console.error(\"Table is already available\");\n      }\n    }\n  };\n  const toggleReservation = tableNumber => {\n    // Find the table to toggle reservation\n    const updatedTables = tables.map(table => {\n      if (table.tableNumber === tableNumber) {\n        return {\n          ...table,\n          isAvailable: !table.isAvailable // Toggle the availability\n        };\n      }\n\n      return table;\n    });\n    setTables(updatedTables);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"restaurant-tables\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: tables.map(table => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `table table-for-${table.tableType} ${table.isAvailable ? 'available' : 'reserved'}`,\n        onClick: () => toggleReservation(table.tableNumber)\n      }, table._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(RestaurantTables, \"NtCfh5ZY9JPknbpxFuMV2U0OF1k=\");\n_c = RestaurantTables;\nexport default RestaurantTables;\nvar _c;\n$RefreshReg$(_c, \"RestaurantTables\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","RestaurantTables","restaurantId","_s","tables","setTables","get","then","response","data","console","log","catch","error","reserveTable","tableNumber","tableToReserve","find","table","isAvailable","post","prevTables","map","unreserveTable","tableToUnreserve","toggleReservation","updatedTables","className","children","tableType","onClick","_id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/keshavsruthi/Documents/GitHub/SC2006-Software-Eng/sc2006/client/src/components/Tables.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport './Tables.css'\n\nfunction RestaurantTables({ restaurantId }) {\n  const [tables, setTables] = useState([]);\n\n  useEffect(() => {\n    // Fetch table data for the specified restaurant\n    axios\n      .get(`http://localhost:30005/api/restaurants/${restaurantId}/tables`)\n      .then((response) => {\n        setTables(response.data);\n        console.log(response.data)\n      })\n      .catch((error) => {\n        console.error(\"Error fetching tables:\", error);\n      });\n  }, [restaurantId, tables]);\n\n  // eslint-disable-next-line\n  const reserveTable = (tableNumber) => {\n    // Find the table to reserve\n    const tableToReserve = tables.find((table) => table.tableNumber === tableNumber);\n\n    if (tableToReserve) {\n      if (tableToReserve.isAvailable) {\n        // Send a request to reserve the table\n        axios\n          .post(`http://localhost:30005/api/restaurants/${restaurantId}/tables/reserve`, { tableNumber })\n          .then(() => {\n            // Update the local state to mark the table as reserved\n            setTables((prevTables) =>\n              prevTables.map((table) =>\n                table.tableNumber === tableNumber\n                  ? { ...table, isAvailable: false }\n                  : table\n              )\n            );\n          })\n          .catch((error) => {\n            console.error(\"Error reserving table:\", error);\n          });\n      } else {\n        // Handle case when the table is already reserved\n        console.error(\"Table is already reserved\");\n      }\n    }\n  };\n\n    // eslint-disable-next-line\n  const unreserveTable = (tableNumber) => {\n    // Find the table to unreserve\n    const tableToUnreserve = tables.find((table) => table.tableNumber === tableNumber);\n\n    if (tableToUnreserve) {\n      if (!tableToUnreserve.isAvailable) {\n        // Send a request to unreserve the table\n        axios\n          .post(`http://localhost:30005/api/restaurants/${restaurantId}/tables/unreserve`, { tableNumber })\n          .then(() => {\n            // Update the local state to mark the table as available\n            setTables((prevTables) =>\n              prevTables.map((table) =>\n                table.tableNumber === tableNumber\n                  ? { ...table, isAvailable: true }\n                  : table\n              )\n            );\n          })\n          .catch((error) => {\n            console.error(\"Error unreserving table:\", error);\n          });\n      } else {\n        // Handle case when the table is already available\n        console.error(\"Table is already available\");\n      }\n    }\n  };\n\n  const toggleReservation = (tableNumber) => {\n    // Find the table to toggle reservation\n    const updatedTables = tables.map((table) => {\n      if (table.tableNumber === tableNumber) {\n        return {\n          ...table,\n          isAvailable: !table.isAvailable, // Toggle the availability\n        };\n      }\n      return table;\n    });\n\n    setTables(updatedTables);\n  };\n\n  return (\n    <div className=\"restaurant-tables\">\n      <div className=\"grid-container\">\n        {tables.map((table) => (\n          <div\n            key={table._id}\n            className={`table table-for-${table.tableType} ${table.isAvailable ? 'available' : 'reserved'}`}\n            onClick={() => toggleReservation(table.tableNumber)}>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}  \n\nexport default RestaurantTables;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,cAAc;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErB,SAASC,gBAAgBA,CAAC;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EAC1C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd;IACAE,KAAK,CACFQ,GAAG,CAAE,0CAAyCJ,YAAa,SAAQ,CAAC,CACpEK,IAAI,CAAEC,QAAQ,IAAK;MAClBH,SAAS,CAACG,QAAQ,CAACC,IAAI,CAAC;MACxBC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACC,IAAI,CAAC;IAC5B,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;MAChBH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD,CAAC,CAAC;EACN,CAAC,EAAE,CAACX,YAAY,EAAEE,MAAM,CAAC,CAAC;;EAE1B;EACA,MAAMU,YAAY,GAAIC,WAAW,IAAK;IACpC;IACA,MAAMC,cAAc,GAAGZ,MAAM,CAACa,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACH,WAAW,KAAKA,WAAW,CAAC;IAEhF,IAAIC,cAAc,EAAE;MAClB,IAAIA,cAAc,CAACG,WAAW,EAAE;QAC9B;QACArB,KAAK,CACFsB,IAAI,CAAE,0CAAyClB,YAAa,iBAAgB,EAAE;UAAEa;QAAY,CAAC,CAAC,CAC9FR,IAAI,CAAC,MAAM;UACV;UACAF,SAAS,CAAEgB,UAAU,IACnBA,UAAU,CAACC,GAAG,CAAEJ,KAAK,IACnBA,KAAK,CAACH,WAAW,KAAKA,WAAW,GAC7B;YAAE,GAAGG,KAAK;YAAEC,WAAW,EAAE;UAAM,CAAC,GAChCD,KACN,CACF,CAAC;QACH,CAAC,CAAC,CACDN,KAAK,CAAEC,KAAK,IAAK;UAChBH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAChD,CAAC,CAAC;MACN,CAAC,MAAM;QACL;QACAH,OAAO,CAACG,KAAK,CAAC,2BAA2B,CAAC;MAC5C;IACF;EACF,CAAC;;EAEC;EACF,MAAMU,cAAc,GAAIR,WAAW,IAAK;IACtC;IACA,MAAMS,gBAAgB,GAAGpB,MAAM,CAACa,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACH,WAAW,KAAKA,WAAW,CAAC;IAElF,IAAIS,gBAAgB,EAAE;MACpB,IAAI,CAACA,gBAAgB,CAACL,WAAW,EAAE;QACjC;QACArB,KAAK,CACFsB,IAAI,CAAE,0CAAyClB,YAAa,mBAAkB,EAAE;UAAEa;QAAY,CAAC,CAAC,CAChGR,IAAI,CAAC,MAAM;UACV;UACAF,SAAS,CAAEgB,UAAU,IACnBA,UAAU,CAACC,GAAG,CAAEJ,KAAK,IACnBA,KAAK,CAACH,WAAW,KAAKA,WAAW,GAC7B;YAAE,GAAGG,KAAK;YAAEC,WAAW,EAAE;UAAK,CAAC,GAC/BD,KACN,CACF,CAAC;QACH,CAAC,CAAC,CACDN,KAAK,CAAEC,KAAK,IAAK;UAChBH,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAClD,CAAC,CAAC;MACN,CAAC,MAAM;QACL;QACAH,OAAO,CAACG,KAAK,CAAC,4BAA4B,CAAC;MAC7C;IACF;EACF,CAAC;EAED,MAAMY,iBAAiB,GAAIV,WAAW,IAAK;IACzC;IACA,MAAMW,aAAa,GAAGtB,MAAM,CAACkB,GAAG,CAAEJ,KAAK,IAAK;MAC1C,IAAIA,KAAK,CAACH,WAAW,KAAKA,WAAW,EAAE;QACrC,OAAO;UACL,GAAGG,KAAK;UACRC,WAAW,EAAE,CAACD,KAAK,CAACC,WAAW,CAAE;QACnC,CAAC;MACH;;MACA,OAAOD,KAAK;IACd,CAAC,CAAC;IAEFb,SAAS,CAACqB,aAAa,CAAC;EAC1B,CAAC;EAED,oBACE1B,OAAA;IAAK2B,SAAS,EAAC,mBAAmB;IAAAC,QAAA,eAChC5B,OAAA;MAAK2B,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAC5BxB,MAAM,CAACkB,GAAG,CAAEJ,KAAK,iBAChBlB,OAAA;QAEE2B,SAAS,EAAG,mBAAkBT,KAAK,CAACW,SAAU,IAAGX,KAAK,CAACC,WAAW,GAAG,WAAW,GAAG,UAAW,EAAE;QAChGW,OAAO,EAAEA,CAAA,KAAML,iBAAiB,CAACP,KAAK,CAACH,WAAW;MAAE,GAF/CG,KAAK,CAACa,GAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGX,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAChC,EAAA,CAxGQF,gBAAgB;AAAAmC,EAAA,GAAhBnC,gBAAgB;AA0GzB,eAAeA,gBAAgB;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}